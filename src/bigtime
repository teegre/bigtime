#! /usr/bin/env bash
######################################
#  _     _       _   _
# | |__ (_) __ _| |_(_)_ __ ___   ___
# | '_ \| |/ _` | __| | '_ ` _ \ / _ \
# | |_) | | (_| | |_| | | | | | |  __/
# |_.__/|_|\__, |\__|_|_| |_| |_|\___|
#          |___/ version 20200714-0.4
# ♥ ##################################

progname="$(basename "$0")"
PROGNAME="${progname^^}"
VERSION="20200614-0.4"

CONFIG_PATH="$HOME/.config/bigtime"
DIGITS_DEFAULT_FILE="$CONFIG_PATH/standard.digits"
BEEP_SOUND="$CONFIG_PATH/beep.wav"
ALARM_SOUND="$CONFIG_PATH/alarm.wav"
KEY_SOUND="$CONFIG_PATH/key.wav"

TERMH="$(tput lines)"
TERMW="$(tput cols)"

COLORS="$(tput colors)"

declare -i CLOCKH
declare -i CLOCKW

PRESETS=("█" " " "▮" " " "⦁" " " "◆" " " "▓" " " "♥" " " "⏺" " ")

__help() {

cat << 'EOB' >&2
BIGTIME - customizable digital clock

USAGE:
bigtime [OPTIONS] [VALUE]

OPTIONS:
-c, --char <char>        - character for digits (default is ∎)
-p, --space <char>       - character for whitespaces (default is " ")
-f                       - display time in 24h format
--offset <hours>         - hours to be added to current time
-s, --small-seconds      - show seconds (normal size)
-S, --big-seconds        - show seconds (big size)
-d, --date               - show date
-D, --date-format        - date format(1)
-b, --blink              - blinking separators
-v, --vertical           - display clock vertically
-a, --alarm <time>       - set alarm
-i, --chime              - hourly chime
--file <filename>        - use a custom digits file (filename only)
-l, --list-files         - print available digits files
--preset <0..n>          - use predefined characters (override -c and -p options)
-P, --list-presets       - print preset characters
-F, --foreground <0..n>  - set foreground color
-B, --background <0..n>  - set background color
-C, --list-colors        - print available colors
-h, --help               - print this help message and exit
-V, --version            - print program's version and exit

KEYS BINDINGS:
b                        - pick a random background color
f                        - pick a random foreground color
q                        - exit program
r                        - refresh screen
R                        - reset to default terminal colors

(1) date format:
--- %W:abbr. weekday name
--- %m:abbr. month name
--- %M: month
--- %D:day of month
--- %Y: year

EOB
}

__err() {
  local color off
  off="$(tput sgr0)"

  case "$2" in
    -l) color="$(tput setaf 2)" ;;
    -n) color="$(tput setaf 3)" ;;
    -u) color="$(tput setaf 1)"
  esac

  ( >&2 echo -e "$progname: ${color}$2${off}" )
}

# compute clock size
clock_size() {
  local height width
  if ! [[ $_VERTICAL ]]; then
    ((height=dh))
    ((width=dw*4+sw+4))
    [[ $_BSEC ]] && ((width+=dw*2+sw+3))
  else
    ((height=dh*2+1))
    ((width=dw*2+2))
    [[ $_BSEC ]] && ((height+=dh))
  fi

  [[ $_F24 && $_SSEC ]] && ((width+=3))
  [[ $_F24 ]] && ! [[ $_SSEC ]] && ((width+=3))
  [[ $_DATE ]] && ((height+=1))
  [[ $_OFFSET -gt 0 ]] && ((height+=1))

  ((CLOCKH=height))
  ((CLOCKW=width))
}

# redraw clock
redraw_clock() {
  _REDRAW=1
  TERMH="$(tput lines)"
  TERMW="$(tput cols)"
  if [[ $TERMH -le $CLOCKH || $TERMW -le $CLOCKW ]]; then
    exit_clock "error: clock doesn't fit"
  fi
  ((_y=(TERMH-CLOCKH)/2))
  ((_x=(TERMW-CLOCKW)/2))
  clear
  _REDRAW=0
}

exit_clock() {
  tput cnorm
  tput rmcup
  stty sane
  # update terminal title to default(?) within tmux (...)
  [[ $TERM =~ ^tmux.*$ ]] && echo -ne "\033]0;$(hostname)\007"
  [[ $1 ]] && __err -u "$1"
  __err -l "-- bye!"
  exit 1
}

! [[ -a "$DIGITS_DEFAULT_FILE" ]] && {
  __err -u "error: $DIGITS_DEFAULT_FILE not found"
    exit
}

# options

_opts=$(LC_ALL=C getopt                                 \
  --long "help"                                         \
  --long "version"                                      \
  --long "preset:"                                      \
  --long "list-presets"                                 \
  --long "char:"                                        \
  --long "space:"                                       \
  --long "offset:"                                      \
  --long "small-seconds"                                \
  --long "big-seconds"                                  \
  --long "date"                                         \
  --long "date-format:"                                 \
  --long "blink"                                        \
  --long "vertical"                                     \
  --long "alarm:"                                       \
  --long "chime"                                        \
  --long "file:"                                        \
  --long "list-files"                                   \
  --long "foreground:"                                  \
  --long "background:"                                  \
  --long "list-colors"                                  \
  --options "h,V,c:,p:,f,s,S,d,D:,b,v,a:,i,F:,B:,P,C,l" \
  --name "$progname"                                    \
  -- "$@"                                               \
) || exit 1

eval set -- "$_opts"

# options parsing

while :; do
  case "$1" in
    -h | --help)
      __help
      exit 0
      ;;
    -V | --version)
      echo "$PROGNAME version $VERSION"
      exit 0
      ;;
    -c | --char)
      shift
      [[ ${#1} != 1 ]] && {
        __err -u "error: --char only 1 character allowed"
        exit 1
      }
      _CHR="$1"
      shift
      ;;
    -p | --space)
      shift
      [[ ${#1} != 1 ]] && {
        __err -u "error: --space only 1 character allowed"
        exit 1
      }
      _SPC="$1"
      shift
      ;;
    -f)
      _F24=1
      shift
      ;;
    --offset)
      shift
      if [[ $1 -ge -12 && $1 -le 12 ]]; then
        _OFFSET=$1
        shift
      else
        __err -u "error: --offset should be a numeric value between -12 and 12"
        exit 1
      fi
      ;;
    -s | --small-seconds)
      unset _BSEC
      _SSEC=1
      shift
      ;;
    -S | --big-seconds)
      unset _SSEC
      _BSEC=1
      shift
      ;;
    -d | --date)
      _DATE=1
      shift
      ;;
    -D | --date-format)
      shift
      #TODO: limit formatting to these...
      _FDATE="$1"
      shift
      ;;
    -b | --blink)
      _BLINK=1
      shift
      ;;
    -v | --vertical)
      unset _BLINK
      _VERTICAL=1
      shift
      ;;
    -a | --alarm)
      _ALARM=1
      shift
      _ALARM_TIME="$1"
      shift
      ;;
    -i | --chime)
      _BEEP=1
      shift
      ;;
    --file)
      shift
      [[ $1 =~ \.digits$ ]] && _FILE="$1" || _FILE="$1.digits"
      ! [[ -a "$CONFIG_PATH/$_FILE" ]] && {
        __err -u "error: --file $_FILE not found"
        exit 1
      } || _FILE="$CONFIG_PATH/$_FILE"
      shift
      ;;
    -l | --list-files)
      find "$CONFIG_PATH" -name "*.digits"
      exit 0
      ;;
    --preset)
      shift
      ((plen=(${#PRESETS[@]}-1)/2))
      if [[ $1 =~ [0-$plen] && $1 -ge 0 && $1 -le $plen ]]; then
        index=$1
        _CHR="${PRESETS[$((index*2))]}"
        _SPC="${PRESETS[$((index*2+1))]}"
        unset index
        shift
      else
        __err -u "error: --preset should be a numeric value between 0 and $plen"
        exit 1
      fi
      unset plen
      ;;
    -P | --list-presets)
      j=0
      for ((i=1;i<${#PRESETS[@]};((i+=2)))); do
        echo "$j: '${PRESETS[$((i-1))]}' '${PRESETS[$i]}'"
        ((j++))
      done
      exit 0
      ;;
    -F | --foreground)
      shift
      if [[ $1 =~ ^[0-9]+$ ]]; then
        if [[ $1 -ge 0 ]] && [[ $1 -le $((COLORS-1)) ]]; then
          _FG="$1"
        else
          __err -u "error: --foreground should be a numeric value between 0 and $((COLORS-1))"
          exit 1
        fi
      else
        __err -u "error: --foreground should be a numeric value between 0 and $((COLORS-1))"
        exit 1
      fi
      shift
      ;;
    -B | --background)
      shift
      if [[ $1 =~ ^[0-9]+$ ]]; then
        if [[ $1 -ge 0 ]] && [[ $1 -le $((COLORS-1)) ]]; then
          _BG="$1"
        else
          __err -u "error: --background should be a numeric value between 0 and $((COLORS-1))"
          exit 1
        fi
      else
        __err -u "error: --background should be a numeric value between 0 and $((COLORS-1))"
        exit 1
      fi
      shift
      ;;
    -C | --list-colors)
      tc="$(tput setaf 0)"
      ((maxcols=(TERMW/5)-1))
      col=0
      for ((i=0;i<COLORS;i++)); do
        on="$(tput setab $((i)))"
        off="$(tput sgr0)"
        printf "%s%s %03d %s" "$on" "$tc" "$i" "$off"
        ((col++))
        ((col>maxcols)) && { printf "\n"; col=0; }
      done
      echo
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      [[ -z $1 ]] && break
      __err -u "error: invalid option '$1'"
      exit 1
  esac
done

 readoption() {
  local file option
  file="$_FILE"
  while read -r line; do
    if [[ $line =~ ^$1=.*$ ]]; then
      IFS=$'\n' read -d "" -ra array <<< "${line//=/$'\n'}"
      if [[ -z ${array[1]} ]]; then
        echo "null"
        return 1
      else
        echo "${array[1]}"
        return 0
      fi
    fi
  done < "$file"
  echo "null"
  return 1
}

_FILE="${_FILE:-$DIGITS_DEFAULT_FILE}"

dh="$(readoption "height")"
dw="$(readoption "width")"
sw="$(readoption "sep_width")"

[[ $dw == "null" ]] && { __err -u "error: $_FILE: missing width value"; exit 1; }
[[ $dh == "null" ]] && { __err -u "error: $_FILE: missing height value"; exit 1; }
[[ $sw == "null" ]] && { __err -u "error: $_FILE: missing sep_width value"; exit 1; }

_SPC="${_SPC:-" "}"
_CHR="${_CHR:-"∎"}"

_OFFSET="${_OFFSET:-0}"

# read file and dynamically declare an array
# for each digit (_D0, _D1... _D9) where 1s are replaced by _CHR
# and 0s by _SPC

for ((i=0;i<10;i++)); do
  digit="$(readoption "$i")"
  [[ $digit == "null" ]] && { __err -u "error: $_FILE: missing digit $i"; exit 1; }
  IFS=$'\n' read -d "" -ra digit <<< "${digit//$';'/$'\n'}"
  ((${#digit[@]}!=dh)) && { __err -u "error: $_FILE: digit $i, height mismatch"; exit 1; }
  for ((j=0;j<dh;j++)); do
    ((${#digit[$j]}!=dw)) &&{ __err -u "error: $_FILE: digit $i, width mismatch: col $((j+1))"; exit 1; }
    digit[$j]=${digit[$j]//0/"$_SPC"}
    digit[$j]=${digit[$j]//1/"$_CHR"}
    declare -a "_D$i+=(\"${digit[$j]}\")"
  done
  unset digit
done

# same as above for separator and blank space
# (may have a different width than digits)

options=("separator" "blank")
for option in "${options[@]}"; do
  opt="$(readoption "$option")"
  [[ $opt == "null" ]] && { __err -u "error: $_FILE: missing $option"; exit 1; }
  IFS=$'\n' read -d "" -ra opt <<< "${opt//$';'/$'\n'}"
  # check whether width matches declared one
  ((${#opt[@]}!=dh)) && { __err -u "error: $option: height mismatch"; exit 1; }
  # replace 0s and 1s
  for ((i=0;i<dh;i++)); do
    # check whether height matches declared one
    ((${#opt[$i]}!=sw)) &&{ __err -u "error: $option, width mismatch: col $((i+1))"; exit 1; }
    opt[$i]=${opt[$i]//0/"$_SPC"}
    opt[$i]=${opt[$i]//1/"$_CHR"}
    case "$option" in
      separator) declare -a "_P+=(\"${opt[$i]}\")" ;;
      blank    ) declare -a "_W+=(\"${opt[$i]}\")"
    esac
  done
  unset opt
done

clock_size

if [[ $TERMH -le $CLOCKH || $TERMW -le $CLOCKW ]]; then
  __err -u "error: clock doesn't fit"
  exit 1
fi

# whenever several instances of bigtime are running
# this is a hack to synchronize them...
_sync() {
  n="1"
  while [ $n != "0" ]; do
    n="$(date "+%N")"
    n="${n:0:1}"
    sleep 0.05
  done
}

reset_colors() {
  printf '\e[mR\n'
  redraw_clock
}

_first_time=0

tput smcup
tput civis
stty -echo -icanon time 0 min 0

[[ -n $_FG ]] && tput setaf "$_FG"
[[ -n $_BG ]] && tput setab "$_BG"

((_y=(TERMH-CLOCKH)/2))
((_x=(TERMW-CLOCKW)/2))

tput clear

trap 'exit_clock "-- interrupted by user"' INT QUIT
trap redraw_clock WINCH

[[ $_ALARM ]] && { ALARM_TIME="$(date -d "$_ALARM_TIME" "+%s")" || exit_clock "invalid alarm time"; }

while :; do

  #shellcheck disable=SC2162
  IFS= read char
  case "$char" in
    h)
        if [[ $_BEEP ]]; then
          unset _BEEP;
        else
          _BEEP=1 
        fi
        aplay --quiet "$KEY_SOUND" &
        ;;
    q) aplay --quiet "$KEY_SOUND" & exit_clock ;;
    r) aplay --quiet "$KEY_SOUND" & redraw_clock ;;
    R) aplay --quiet "$KEY_SOUND" & reset_colors -r ;;
    " ") unset ALARM; aplay --quiet "$KEY_SOUND"
  esac
  
  [[ $_REDRAW == 1 ]] && continue

  #date
  [[ $_DATE ]] && {
    if [[ $_FDATE ]]; then
      _date_format="$(date -d "now + $_OFFSET hours" '+%a %d %b %m %Y')"
      IFS=$'\n' read -d "" -ra date_format <<< "${_date_format// /$'\n'}"
      FDATE="$_FDATE"
      FDATE="${FDATE//%W/${date_format[0]}}"
      FDATE="${FDATE//%D/${date_format[1]}}"
      FDATE="${FDATE//%m/${date_format[2]}}"
      FDATE="${FDATE//%M/${date_format[3]}}"
      FDATE="${FDATE//%Y/${date_format[4]}}"
      if [[ $FDATE == "$_FDATE" && $_first_time == 0 ]]; then
        # it means we couldn't find anything related to date format
        exit_clock "error: invalid date format"
      fi
    else
      FDATE="$(date -d "now + $_OFFSET hours" "+%F")"
    fi
    _date="${FDATE^^}"
    _first_time=1
  }

  # time
  if [[ $_F24 ]]; then
    _H="$(date -d "now + $_OFFSET hours" "+%H")"
  else
    _H="$(date -d "now + $_OFFSET hours" "+%I")"
    H="$(date -d "now + $_OFFSET hours" "+%H")"
    [[ ${H:0:1} == 0 ]] && H="${H:1:1}"
    [[ $H -ge 12 ]] && _AMPM="PM" || _AMPM="AM" 
  fi

  _M="$(date "+%M")"
  _S="$(date "+%S")"

  _A="$(date "+%s")" # seconds from the epoch, for alarm

  # change terminal title
  [[ $_T != "$_M" ]] && { _T="$_M"; echo -ne "\033]0;bigtime: $_H:$_M $_AMPM\007"; }

  # blink
  [[ $((${_S:1:1} % 2)) == 0 ]] && index=0 || index=1

  h1=${_H:0:1}
  h2=${_H:1:1}
  m1=${_M:0:1}
  m2=${_M:1:1}
  s1=${_S:0:1}
  s2=${_S:1:1}

  # SIZE DEBUG
  # tput cup 0 0
  # printf "x=%d y=%d ch=%d cw=%d dh=%d dw=%d sw=%d" "$_x" "$_y" "$CLOCKH" "$CLOCKW" "$dh" "$dw" "$sw"

  tput cup $((_y-1)) $((_x))
  echo $"$_date"

  _sync

  # indicators
  tput cup $((_y)) $((_x-2)); [[ $_BEEP ]] && echo "$_CHR" || echo "$_SPC"
  [[ $_ALARM ]] && {
      tput cup $((_y+dh-1)) $((_x-2))
        if [[ $ALARM && $index == 1 ]]; then
            echo " "
        else
            echo "A"
        fi
    }

  # beep
  [[ -z $ALARM && $_BEEP && $_M == "00" && $_S == "00" ]] && aplay --quiet "$BEEP_SOUND" &

  # alarm
  [[ $_ALARM ]] && [[ $((ALARM_TIME+_OFFSET)) == "$_A" ]] && {
    # set new alarm for tomorrow
    ALARM_TIME="$(date -d "@$((ALARM_TIME+86400))" "+%s")"
    ALARM=1
  } 
  [[ $ALARM ]] && [[ $index == 0 ]] && aplay --quiet "$ALARM_SOUND" &

  # HORIZONTAL LAYOUT
  if ! [[ $_VERTICAL ]]; then

    for ((i=0;i<dh;i++)); do

      H1=$"_D"$h1"[$i]"     # hours
      H2=$"_D"$h2"[$i]"     #
      M1=$"_D"$m1"[$i]"     # minutes
      M2=$"_D"$m2"[$i]"     #

      [[ $_BSEC ]] && {
        S1=$"_D"$s1"[$i]"   # seconds
        S2=$"_D"$s2"[$i]"
      }

      SP=$"${_P[$i]}"       # separator
      WS=$"${_W[$i]}"       # whitespace
      
      [[ $_BLINK ]] && {
        blink_array=("$SP" "$WS")
        sp="${blink_array[$index]}"
      } || sp="$SP"

      tput cup $((i+_y)) $((_x))
      case $i in
        0)
          if [[ $_SSEC ]]; then
            printf "%s%s%s%s%s%s%s%s%s %s"                 \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}" "$s1$s2"
          elif [[ $_BSEC ]]; then
            printf "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s"        \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}" $"$_SPC" \
            $"$sp" $"$_SPC" $"${!S1}" $"$_SPC" $"${!S2}"
          else
            printf "%s%s%s%s%s%s%s%s%s"                    \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}"
          fi
          ;;
        $((dh-1)))
          if [[ $_BSEC ]]; then
            printf "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s %s"     \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}" $"$_SPC" \
            $"$sp" $"$_SPC" $"${!S1}" $"$_SPC" $"${!S2}"   \
            "$_AMPM"
          else
            printf "%s%s%s%s%s%s%s%s%s %s"                 \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}" "$_AMPM"
          fi
          ;;
        *)
          if [[ $_BSEC ]]; then
            printf "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s"        \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}" $"$_SPC" \
            $"$sp" $"$_SPC" $"${!S1}" $"$_SPC" $"${!S2}"
          else
            printf "%s%s%s%s%s%s%s%s%s"                    \
            $"${!H1}" $"$_SPC" $"${!H2}" $"$_SPC" $"$sp"   \
            $"$_SPC" $"${!M1}" $"$_SPC" $"${!M2}"
          fi
      esac
    done

    tput cup $((_y+dh)) $((_x))
    (( _OFFSET > 0 )) && echo "[+$_OFFSET]"
    (( _OFFSET < 0 )) && echo "[$_OFFSET]"

  # VERTICAL LAYOUT
  elif [[ $_VERTICAL ]]; then
	y=$_y

    for ((i=0;i<dh;i++)); do

      H1=$"_D"$h1"[$i]"     # hours
      H2=$"_D"$h2"[$i]"     #

      tput cup $((y)) $((_x))
      
      case "$i" in
        $((dh-1)))
          printf "%s%s%s %s" $"${!H1}" $"$_SPC" $"${!H2}" "$_AMPM"
          ;;
        *)
          printf "%s%s%s" $"${!H1}" $"$_SPC" $"${!H2}"
      esac

      ((y++))

    done

    tput cup $((y)) $((_x))
    (( _OFFSET > 0 )) && echo "[+$_OFFSET]"
    (( _OFFSET < 0 )) && echo "[$_OFFSET]"

    ((y++))

    for ((i=0;i<dh;i++)); do

      M1=$"_D"$m1"[$i]"     # minutes
      M2=$"_D"$m2"[$i]"     #

      tput cup $((y)) $((_x))
      
      if ((i == dh-1)) && [[ $_SSEC ]]; then
        printf "%s%s%s %s%s" $"${!M1}" $"$_SPC" $"${!M2}" "$s1" "$s2"
      else
        printf "%s%s%s" $"${!M1}" $"$_SPC" $"${!M2}"
      fi

      ((y++))

    done

    ((y++))

    if [[ $_BSEC ]]; then
      for ((i=0;i<dh;i++)); do

        S1=$"_D"$s1"[$i]" # seconds
        S2=$"_D"$s2"[$i]"

        tput cup $((y)) $((_x))
        printf "%s%s%s" $"${!S1}" $"$_SPC" $"${!S2}"

        ((y++))

      done

    elif [[ $_SSEC ]]; then
      tput cup $((y)) $((_x))
    fi
  fi
  
  sleep 0.5

done
